#EMBEDDINGS SEMÁNTICOS
from sentence_transformers import SentenceTransformer

model = SentenceTransformer('distiluse-base-multilingual-cased-v1')
X_embed = model.encode(df['texto_filtrado'].dropna().tolist())

#MÉTODOS DEL CODO Y SILUETA
from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score
import matplotlib.pyplot as plt

range_n_clusters = list(range(2, 8))
SSQ = []
sil_avg = []

for n_clusters in range_n_clusters:
    kmeans = KMeans(n_clusters=n_clusters, random_state=10, n_init=10)
    cluster_labels = kmeans.fit_predict(X_embed)

    SSQ.append(kmeans.inertia_)

    sil_avg.append(silhouette_score(X_embed, cluster_labels))

fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 5))

ax1.plot(range_n_clusters, SSQ, marker='o', color='royalblue')
ax1.set_title("Método del codo")
ax1.set_xlabel("Número de clusters")
ax1.set_ylabel("Inercia")

ax2.plot(range_n_clusters, sil_avg, marker='o', color='darkorange')
ax2.set_title("Método de Silhouette")
ax2.set_xlabel("Número de clusters")
ax2.set_ylabel("Valor Silhouette")

plt.tight_layout()
plt.show()

#ALGORITMO K-MEANS
from sklearn.cluster import KMeans

kmeans = KMeans(n_clusters=2, random_state=42)
df['cluster'] = kmeans.fit_predict(X_tfidf)

#VISUALIZACIÓN CON TSNE
from sklearn.manifold import TSNE
import matplotlib.pyplot as plt
import seaborn as sns

X_tsne = TSNE(n_components=2, random_state=42).fit_transform(X_tfidf.toarray())

plt.figure(figsize=(10, 6))
sns.scatterplot(x=X_tsne[:,0], y=X_tsne[:,1], hue=df['cluster'], palette='Set1')
plt.title('Visualización de Clusters con t-SNE')
plt.show()

#CENTROIDES DEL MODELO
import numpy as np

centroids = kmeans.cluster_centers_

feature_names = vectorizer.get_feature_names_out()
top_n = 4

for i, centroide in enumerate(centroids):
    top_words = [feature_names[j] for j in np.argsort(centroide)[-top_n:]]
    print(f"Cluster {i}: {', '.join(top_words)}")
